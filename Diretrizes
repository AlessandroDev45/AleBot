DIRETRIZES PARA MODIFICAÇÕES NO CÓDIGO:

SEMPRE LER O CODIGO PARA NAO CRIAR NOVOS MODULOS OU CLASSES QUE NAO SEJAM NECESSARIOS
ORGANIZAR O CODIGO DE FORMA A MANTER A ESTRUTURA ATUAL E LOGICA ATUAL

1. PRINCÍPIO FUNDAMENTAL:
- Todos os dados da API Binance DEVEM ser centralizados no DataManager
- Nenhum outro módulo deve acessar a API diretamente
- O DataManager deve ser o ponto central de acesso aos dados para todos os modulos
  mas cada modulo deve ter seu proprio cache, e tratamento de dados de forma adequada
  dentro do modulo em questao.
- Garantir que o cache seja utilizado corretamente para minimizar chamadas à API

2. PRESERVAÇÃO DO CÓDIGO:
- NÃO criar novos módulos ou classes
- NÃO modificar a estrutura existente que já funciona
- NÃO alterar nomes de métodos ou parâmetros existentes
- Manter compatibilidade com código existente

3. FLUXO DE DADOS CORRETO:
BinanceClient -> DataManager -> Outros Módulos
- BinanceClient: Apenas comunicação com API
- DataManager: Centraliza e gerencia todos os dados
- Outros módulos: Sempre obtêm dados via DataManager
- Cache: Implementar sistema de cache eficiente no DataManager

4. AO FAZER CORREÇÕES:
- Verificar se a mudança mantém compatibilidade com código existente
- Garantir que dados continuem fluindo corretamente
- Manter logs e tratamento de erros existentes
- Não remover funcionalidades que já funcionam
- Documentar claramente as alterações feitas

5. VERIFICAÇÕES ANTES DE CADA MUDANÇA:
- A mudança mantém a estrutura existente?
- A mudança centraliza dados no DataManager?
- A mudança preserva funcionalidades existentes?
- Outros módulos continuam obtendo dados via DataManager?
- O sistema de cache está sendo utilizado corretamente?

6. ORDEM DE PRIORIDADE:
1º Centralização de dados no DataManager
2º Manutenção de funcionalidades existentes
3º Correção de erros
4º Melhorias de código
5º Otimizações de performance

7. EVITAR:
- Duplicação de código
- Acesso direto à API fora do BinanceClient
- Quebra de funcionalidades existentes
- Mudanças desnecessárias na estrutura
- Uso de dados fictícios ou placeholders

8. GRÁFICOS:
- Garantir que os gráficos sejam atualizados de forma correta e eficiente com dados do DataManager 
- Nunca usar dados fictícios para os gráficos
- Implementar sistema de atualização eficiente
- Manter consistência visual entre diferentes timeframes
- Garantir sincronização entre gráficos relacionados

9. GESTÃO DE DADOS:
- Implementar sistema de cache eficiente
- Gerenciar limites de requisições da API
- Manter dados históricos organizados
- Implementar limpeza periódica de cache
- Garantir integridade dos dados

10. TRATAMENTO DE ERROS:
- Implementar logs detalhados
- Tratar falhas de conexão
- Implementar sistema de retry
- Manter o usuário informado
- Garantir recuperação graceful

11. PERFORMANCE:
- Otimizar chamadas à API
- Implementar cache eficiente
- Minimizar processamento desnecessário
- Gerenciar uso de memória
- Manter responsividade da interface

12. SEGURANÇA:
- Proteger dados sensíveis
- Validar inputs do usuário
- Implementar rate limiting
- Gerenciar tokens e chaves
- Manter logs seguros

13. ATUALIZAÇÕES:
- Manter intervalos consistentes
- Evitar sobrecarga da API
- Sincronizar dados relacionados
- Implementar atualização inteligente
- Priorizar dados críticos

14. VALIDAÇÃO:
- Verificar integridade dos dados
- Validar cálculos e indicadores
- Confirmar execução de ordens
- Verificar sincronização de dados
- Validar estado do sistema

15. MONITORAMENTO:
- Implementar heartbeat do sistema
- Monitorar uso da API
- Acompanhar performance
- Detectar anomalias
- Gerar alertas relevantes

16. DOCUMENTAÇÃO:
- Manter logs organizados
- Documentar mudanças
- Registrar decisões de design
- Manter guia de troubleshooting
- Documentar fluxo de dados


